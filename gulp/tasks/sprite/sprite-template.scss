/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;
*/
{{#shapes}}
${{name}}-offset-x: {{#calcOffset}}{{position.absolute.x}}|{{padding.right}}{{/calcOffset}}px;
${{name}}-offset-y: {{#calcOffset}}{{position.absolute.y}}|{{padding.top}}{{/calcOffset}}px;
${{name}}-width: {{width.inner}}px;
${{name}}-height: {{height.inner}}px;
${{name}}-total-width: {{spriteWidth}}px;
${{name}}-total-height: {{spriteHeight}}px;
${{name}}-image: '../img/{{{spriteFile}}}';
${{name}}-png-image: '../img/{{#png}}{{{spriteFile}}}{{/png}}';
${{name}}: 0px 0px {{#calcOffset}}{{position.absolute.x}}|{{padding.right}}{{/calcOffset}}px {{#calcOffset}}{{position.absolute.y}}|{{padding.top}}{{/calcOffset}}px {{width.inner}}px {{height.inner}}px {{spriteWidth}}px {{spriteHeight}}px '../img/{{{spriteFile}}}' '../img/{{#png}}{{{spriteFile}}}{{/png}}';
{{/shapes}}

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image}?v=2);
}

@mixin sprite-png-image($sprite) {
  $sprite-png-image: nth($sprite, 10);
  background-image: url(#{$sprite-png-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
  .lt-ie9 & {
    @include sprite-png-image($sprite);
  }
}