/*
 * 00_bits/utils
 * Utils module
 * Contains mixins, functions, and placeholders
 */

// Box shadow samples
$single_shadow: 0px 5px 10px -4px rgba(0, 0, 0, 0.3);
$form_focus_shadow: inset 0 5px 5px rgba(0, 0, 0, 0.025), 0 0 2px rgba(82, 168, 236, 0.6);
$inset_shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);

/**
 * Mixins.
 * @usage:
 * .selector {
 *   @include mixinName(args);
 * }
 */

@mixin gradient ($top, $bottom){
  background: $bottom;
  background: linear-gradient(to bottom,  $top 0%,$bottom 100%);
}

// String Replace for font-face mixin.
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
  $src: null;

  $extmods: (
    eot: "?",
    svg: "#" + str-replace($name, " ", "_")
  );

  $formats: (
    otf: "opentype",
    ttf: "truetype"
  );

  @each $ext in $exts {
    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    @if $src == null {
      $src: url(quote($path + "." + $extmod)) + " " + format(quote($format));
    } @else {
      $src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
    }
  }

  @font-face {
    font-family: quote($name);
    font-style: $style;
    font-weight: $weight;
    src: $src;
  }
}

@mixin resetList ($margin: 0 0 20px, $padding: 0) {
  margin: $margin;
  padding: $padding;
  list-style:none;
  font-size:100%;
}

@mixin square($w,$h) {
  width: $w;
  height: $h;
}

@mixin marpad($m:0px,$p:0px) {
  margin: $m;
  padding: $p;
}

@mixin inlineBlock($h) {
  display: inline-block;
  *display: inline;
  zoom: 1;
  _height: $h;
}

@mixin magicBox($perc:35) {
  position: relative;
  padding-bottom: $perc * 1%;
  height: 0;
}

@mixin quickSpan ($columns: $global_columns, $gutter: $global_gutter, $i: 6) {
  $col_width: (99.9998 / $columns);
  $col_remainder: ($gutter/$columns) * $i;
  width: ($col_width * $i - $gutter + $col_remainder) * 1%;
  margin-right: $gutter * 1%;
  float: left;
}

@mixin quickOffset ($columns: $global_columns, $gutter: $global_gutter, $i: 1) {
  $col_width: (99.9998 / $columns);
  $col_remainder: ($global_gutter/$global_columns) * $i;
  margin-left: (($col_width * $i - $gutter + $col_remainder) + $gutter) * 1%;
}

@function columnWidth ($i: 1, $columns: $global_columns, $gutter: $global_gutter) {
  $col_width: (99.9998 / $columns);
  $col_remainder: ($global_gutter/$global_columns) * $i;
  @return (($col_width * $i - $gutter + $col_remainder) + $gutter);
}

$path_to_images: "../images/";

@mixin bgImg($name, $l:50%, $t:50%, $repeat:no-repeat) {
  display: block;
  background: url($path_to_images + $name) $l $t $repeat;
}

@mixin bgImgX2($name, $l, $t, $w, $h, $repeat:no-repeat) {
  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
    display: block;
    background-image: url($path_to_images + '/x2/' + $name);
    background-position: $l $t;
    background-repeat: $repeat;
    //@include bgImg('/x2/' + $name, $l, $t);
    background-size: $w $h;
  }
}

/**
 * Placeholders
 * @usage:
 * .selector {
 *   @extend %placeholder;
 * }
 */

%overflower {
  width: auto;
  float: none;
  overflow: hidden;
}

// Clearfix
%group {
  zoom: 1;
  &:before {
    display: table;
    content: "";
  }
  &:after {
    display: table;
    content: "";
    clear: both;
  }
}

%borderBox {
  box-sizing: border-box;
  &:before, &:after {
    box-sizing: border-box;
  }
}
